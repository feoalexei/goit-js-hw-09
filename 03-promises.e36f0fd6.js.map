{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAiCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAvCAQ,SAASC,cAAc,SAG/BC,iBAAiB,UAGtB,SAA0BC,GACxBA,EAAEC,iBACF,MACEZ,OAASa,MAAOC,GAChBC,MAAQF,MAAOE,GACfC,QAAUH,MAAOG,IACfL,EAAEM,cAAcC,SACpB,IAAK,IAAIC,EAAI,EAAGA,GAAKC,OAAOJ,GAASG,IAAK,CACxC,IAAIE,EAAkBD,OAAON,GAAcM,OAAOL,GAAQI,EAC1DrB,EAAcqB,EAAGE,GACdC,MAAK,EAACvB,SAAEA,EAAQC,MAAEA,MACjBuB,EAAA3B,GAAS4B,OAAOC,QACd,uBAAqB1B,QAAiBC,MAAU,IAGnD0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBuB,EAAA3B,GAAS4B,OAAOG,QACd,sBAAoB5B,QAAeC,MAAU,G","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Selectors\nconst form = document.querySelector('.form');\n\n// Event listeners\nform.addEventListener('submit', generatePromises);\n\n// Function to create several promises based on amount\nfunction generatePromises(e) {\n  e.preventDefault();\n  const {\n    delay: { value: firstDelay },\n    step: { value: step },\n    amount: { value: amount },\n  } = e.currentTarget.elements;\n  for (let i = 1; i <= Number(amount); i++) {\n    let subsequentDelay = Number(firstDelay) + Number(step) * i;\n    createPromise(i, subsequentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\n// Function to create one promise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","value","firstDelay","step","amount","currentTarget","elements","i","Number","subsequentDelay","then","$parcel$interopDefault","Notify","success","catch","failure"],"version":3,"file":"03-promises.e36f0fd6.js.map"}